library(datasets)
data(iris)
?iris
class(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size)
)
select(cran,-(x:size))
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) )
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
submit()
tbl
print(tbl)
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2, sex_class, count, -grade)
res
students2
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
getwd()
setwd("Coursera")
setwd("DataScienceSpecialization/DataCleaning/Week3Quiz/")
getwd()
file<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
comm<-read.csv("getdata-data-ss06hid.csv")
comm
head(comm)
comm$SERIALNO
comm$ACR
comm$AGS
?logical
class(comm)
dataframe?
;
?data_frame
?data.frame
agricultureLogical<-tapply(comm,comm$ACR==3 & comm&AGS==6)
agricultureLogical<-tapply(comm,comm$ACR==3 & comm$AGS==6)
?tapply
agricultureLogical<-tapply(comm,comm$SERIALNO, comm$ACR==3 & comm$AGS==6)
agricultureLogical<-tapply(comm,comm$SERIALNO, if comm$ACR==3 & comm$AGS==6)
and
and()
&
?where
?and
?test
?which
?tapply
agricultureLogical<-tapply(comm,comm$SERIALNO, if comm$ACR==3 & comm$AGS==6)
agricultureLogical<-tapply(comm,comm$SERIALNO, if (comm$ACR==3 & comm$AGS==6))
agricultureLogical<-tapply(comm,comm$SERIALNO, if (comm$ACR==3 & comm$AGS==6) TRUE else FALSE)
agricultureLogical<-tapply(comm,comm$SERIALNO, ACR==3 & AGS==6)
agricultureLogical<-tapply(comm,comm$SERIALNO, "ACR"==3 & "AGS"==6)
agricultureLogical<-tapply(comm,comm$SERIALNO, $ACR==3 & $AGS==6)
agricultureSubset <- comm[comm$ACR==3 & comm$AGS == 6), ]
agricultureSubset <- comm[comm$ACR==3 & comm$AGS == 6, ]
agricultureSubset
head(agricultureSubset)
head(comm)
agricultureSubset <- comm[comm$ACR==3 & comm$AGS == 6]
agricultureSubset <- comm[comm$ACR==3 & comm$AGS == 6,]
agricultureSubset <- comm[comm$ACR=="3" & comm$AGS == "6",]
head(agricultureSubset)
tbl_df(comm)
commTable<-tbl_df(comm)
commTable
commTableshort<-select(commTable,SERIALNO,ACR,AGS)
commTableshort
commTablefilter<-filter(commTableshort,ACR==3,AGS==6)
commTablefilter
?find
commTable$SERIALNO[30346]
commTable$SERIALNO=30346
commTable$SERIALNO
commTable<-tbl_df(comm)
commTable$SERIALNO
commTable$SERIALNO[403]
commTable$SERIALNO[236]
commTable$SERIALNO[59]
commTable$SERIALNO[125]
library(jpeg)
library("jpeg")
install(jpeg)
library(graphics)
install.packages("jpeg")
library(jpeg)
img<-read.jpeg("getdata-jeff.jpg")
?jpeg
img<-jpeg("getdata-jeff.jpg",native=TRUE)
img
img<-jpeg("getdata-jeff.jpg")
img
img<-jpeg(file="getdata-jeff.jpg")
img
jpeg(file="getdata-jeff.jpg")
example(rect)
?jpeg
library(jpeg)
img<-readJPEG("getdata-jeff.jpg",native = TRUE)
getwd()
img<-readJPEG("getdata-jeff.jpg",native = TRUE)
img<-readJPEG("getdata-jeff (1).jpg",native = TRUE)
img
summarize(img)
class(img)
quantile(img,30,80)
?quantile
quantile(img, probs = c(30,80))
quantile(img, probs = c(.30,.80))
gdp<-read.csv("getdata-data-GDP.csv")
edstats<-read.csv("getdata-data-EDSTATS_Country.csv")
head(gdp)
gdpTable<-tbl_df(gdp)
edstatsTable<-tbl_df(edstats)
gdpTable
edstatsTable
?match
library("dplyr", lib.loc="~/R/win-library/3.2")
joinedData<-inner_join(gdpTable,edstatsTable,by=c("X" = "CountryCode"))
joinedData
joinedData<-inner_join(edstatsTable,gdpTable, by=c("CountryCode"="X" ))
joinedData
dim(joinedData)
count(joinedData$CountryCode)
groupedData<-group_by(joinedData,Long.Name)
groupedData
head(gdp)
summarize(gdp)
summarize(gdpTable)
gdpTable
gdpTable[13]
gdpTable[,13]
gdpTable[13,]
gdpTable[16,]
gdpTable[17,]
joinedData
tail(joinedData)
is.NA(joinedData$CountryCode)
is.na(joinedData$CountryCode)
joinedData$Gross.domestic.product.2012
joinedData
summarize?
;
?summarize
oecd<-filter(joinedData,Lending.category="High income: OECD")
oecd<-filter(joinedData,Lending.category=="High income: OECD")
oecd
oecd<-filter(joinedData,Income.Group=="High income: OECD")
oecd
mean(oecd$Gross.domestic.product.2012)
oecd$Gross.domestic.product.2012
mean(as.int(oecd$Gross.domestic.product.2012)
)
mean(as.numeric(oecd$Gross.domestic.product.2012))
as.numeric(oecd$Gross.domestic.product.2012)
mean(as.numeric(oecd$Gross.domestic.product.2012))
View(oecd$Gross.domestic.product.2012)
oecd$Gross.domestic.product.2012
oecd$Gross.domestic.product.2012[1]
oecd$Gross.domestic.product.2012[2]
class(oecd$Gross.domestic.product.2012)
oecd$X.1
oecd$X.2
oecd$X.3
oecd$X.4
oecd$X.5
oecd$X.6
oecd$X.7
oecd$X.8
oecd$Gross.domestic.product.2012
?factor
unclass(oecd$Gross.domestic.product.2012)
as.numeric(unclass(oecd$Gross.domestic.product.2012))
mean(as.numeric(unclass(oecd$Gross.domestic.product.2012)))
vals<-as.numeric(unclass(oecd$Gross.domestic.product.2012))
class(vals)
vals[195]
dim(vals)
length(vals)
mean(vals)
nonoecd<-filter(joinedData,Income.Group=="High income: nonOECD")
dim(nonoecd)
nonoecd
mean(nonoecd$Gross.domestic.product.2012)
mean(as.numeric(nonoecd$Gross.domestic.product.2012)
)
gdp<-read.csv("getdata-data-GDP.csv")
gdp
dim(gdp)
gdp[,1]
gdp[,2]
gdp[,3]
gdp[,4]
gdp[,5]
gdp[,6]
gdp[,7]
gdp[,8]
gdp[,9]
gdp<-read.csv("getdata-data-GDP.csv")
gdp
head(gdp)
gdp<-read.csv("getdata-data-GDP.csv")
head(gdp)
edstats<-read.csv("getdata-data-EDSTATS_Country.csv")
gdpTable<-tbl_df(gdp)
edstatsTable<-tbl_df(edstats)
joinedTable<-inner_join(edstatsTable,gdpTable,by="CountryCode")
joinedTable
dim(joinedTable)
sortedTable<-arrange(joinedTable,desc(Gross.domestic.product.2012..millions.of.US.dollars.))
head(sortedTable,13)
View(sortedTable)
sortedTable<-arrange(joinedTable,desc(Ranking))
oecd<-filter(joinedTable,Income.Group=="High income: OECD")
oecd
mean(oecd$Ranking)
?slice
?quantile
seq(0,1,0.25)
quantile(sortedTable$Ranking,seq(0,1,0.25))
quants<-quantile(sortedTable$Ranking,seq(0,1,0.25))
quants
class(quants)
quantis[1]
quants[1]
quants[1,1]
quants["0%"]
?summarize
?group_by
?slice
?group_by
class(sortedTable)
summarize(sortedTable,"50%"=quantile(Ranking, probs = 0.5))
summarize(sortedTable,"0%"=quantile(Ranking, probs = 0),"25%"=quantile(Ranking, probs = 0.25),"50%"=quantile(Ranking, probs = 0.5),"75%"=quantile(Ranking, probs = 0.75),"100%"=quantile(Ranking, probs = 1))
grouped<-group_by(sortedTable,Income.Group)
View(grouped)
getwd()
setwd("../")
getwd()
setwd("../")
getwd()
setwd("ExploratoryDataAnalysis/Assignment1/ExData_Plotting1")
ls()
dir()
swirl()
swirl()
install.packages(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
quit()
